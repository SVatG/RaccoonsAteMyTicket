; Bone animation shader

; Uniforms
.fvec projection[4], modelView[4]
.fvec texoff

; Bone frames. Need 3x4 only, final part is homogenous component and always 0, 0, 0, 1
.fvec bone00[3]
.fvec bone01[3]
.fvec bone02[3]
.fvec bone03[3]
.fvec bone04[3]
.fvec bone05[3]
.fvec bone06[3]
.fvec bone07[3]
.fvec bone08[3]
.fvec bone09[3]
.fvec bone10[3]
.fvec bone11[3]
.fvec bone12[3]
.fvec bone13[3]
.fvec bone14[3]
.fvec bone15[3]
.fvec bone16[3]
.fvec bone17[3]
.fvec bone18[3]
.fvec bone19[3]
.fvec bone20[3]

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww
.alias  homo  myconst.xxxy ; yes homo

.constf texstretch(0.25, 0.25, -0.5, -0.5)

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outtc1 texcoord1
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias inbone_idx v1
.alias inbone_wgt v2
.alias innrm v3
.alias intex v4

.proc main
    ; Force the w component of inpos to be 1.0
    mov r0.xyz, inpos
    mov r0.w,   ones
    
    ; Zero a 3x4 matrix for the bone transform
    MOV r10, zeros
    MOV r11, zeros
    MOV r12, zeros
    
    ; Bone 0
    MOVA a0.x, inbone_idx.x
    MUL r9, bone00[a0.x+0].xyzw, inbone_wgt.xxxx
    ADD r10, r10, r9
    MUL r9, bone00[a0.x+1].xyzw, inbone_wgt.xxxx
    ADD r11, r11, r9
    MUL r9, bone00[a0.x+2].xyzw, inbone_wgt.xxxx
    ADD r12, r12, r9
    
    ; Bone 1
    MOVA a0.x, inbone_idx.y
    MUL r9, bone00[a0.x+0].xyzw, inbone_wgt.yyyy
    ADD r10, r10, r9
    MUL r9, bone00[a0.x+1].xyzw, inbone_wgt.yyyy
    ADD r11, r11, r9
    MUL r9, bone00[a0.x+2].xyzw, inbone_wgt.yyyy
    ADD r12, r12, r9
    
    ; Bone 2 (disabled)
    ;MOVA a0.x, inbone_idx.z
    ;MUL r9, bone00[a0.x+0].xyzw, inbone_wgt.zzzz
    ;ADD r10, r10, r9
    ;MUL r9, bone00[a0.x+1].xyzw, inbone_wgt.zzzz
    ;ADD r11, r11, r9
    ;MUL r9, bone00[a0.x+2].xyzw, inbone_wgt.zzzz
    ;ADD r12, r12, r9
    
    ; Bone 3 (disabled)
    ;MOVA a0.x, inbone_idx.w
    ;MUL r9, bone00[a0.x+0].xyzw, inbone_wgt.wwww
    ;ADD r10, r10, r9
    ;MUL r9, bone00[a0.x+1].xyzw, inbone_wgt.wwww
    ;ADD r11, r11, r9
    ;MUL r9, bone00[a0.x+2].xyzw, inbone_wgt.wwww
    ;ADD r12, r12, r9
    
    ; Multiply bone matrix onto input position
    dp4 r13.x, r10, r0
    dp4 r13.y, r11, r0
    dp4 r13.z, r12, r0
    mov r13.w, myconst.y
    
    ; Use this to shortcircuit bones
    ;mov r13, r0

    ; r1 = modelView * inpos
    dp4 r1.x, modelView[0], r13
    dp4 r1.y, modelView[1], r13
    dp4 r1.z, modelView[2], r13
    dp4 r1.w, modelView[3], r13
    
    ; outview = -r1
    mov outview, -r1

    ; outpos = projection * r1
    dp4 outpos.x, projection[0], r1
    dp4 outpos.y, projection[1], r1
    dp4 outpos.z, projection[2], r1
    dp4 outpos.w, projection[3], r1

    ; outtex = intex
    mov outtc0, intex.xy

    ; outtex2 = posttransform xy
    ; mov outtc1, r1.xy
    mov r9, texstretch
    mul r1.xy, r1.xy, r9.xy
    add outtc1, r1.xy, r9.zw

    ; Multiply bone matrix onto input normal
    dp3 r13.x, innrm, r10
    dp3 r13.y, innrm, r11
    dp3 r13.z, innrm, r12
    
    ; Transform the normal vector with the modelView matrix
    ; TODO: use a separate normal matrix that is the transpose of the inverse of modelView
    dp3 r14.x, modelView[0], r13
    dp3 r14.y, modelView[1], r13
    dp3 r14.z, modelView[2], r13
    dp3 r6.x, r14, r14
    rsq r6.x, r6.x
    mul r14.xyz, r14.xyz, r6.x

    mov r0, myconst.yxxx
    add r4, ones, r14.z
    mul r4, half, r4
    cmp zeros, ge, ge, r4.x
    rsq r4, r4.x
    mul r5, half, r14
    jmpc cmp.x, degenerate

    rcp r0.z, r4.x
    mul r0.xy, r5, r4
    
degenerate:
    mov outnq, r0
    mov outclr, ones

    ; We're finished
    end
.end
